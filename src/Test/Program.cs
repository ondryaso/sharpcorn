using System.Runtime.InteropServices;
using SharpCorn;
using SharpCorn.Abstractions;
using SharpCorn.Abstractions.Enums;
using SharpCorn.Callbacks.Native;
using SharpCorn.Constants;
using Architecture = SharpCorn.Abstractions.Enums.Architecture;

namespace Test;

public class Program
{
    public static void Main(string[] args)
    {
        TestNonBasicProgram();
    }

    private static void TestBasicProgram()
    {
        var data = new[]
        {
            0xe3a0000a, // MOV R0, 0xA
            0xe3a0100c, // MOV R1, 0xC
            0xe28008ff, // ADD R0, 0xFF0000
            0xe5801000, // STR R1, [R0]
            0xe320f000, // NOP
            0xe320f000  // NOP
        };

        var unicorn = new Unicorn(Architecture.Arm, EngineMode.Arm | EngineMode.LittleEndian);

        unicorn.MemMap(0x1000, 0x1000, MemoryPermissions.Exec | MemoryPermissions.Read);
        unicorn.MemMap(0xFF0000, 0x1000, MemoryPermissions.Write | MemoryPermissions.Read);

        unicorn.MemWrite(0x1000, MemoryMarshal.Cast<uint, byte>(data));
        unicorn.EmuStart(0x1000, 0, 0, 6);
    }

    private static void TestNonBasicProgram()
    {
        var program =
            new byte[]
            {
                0x7f, 0x45, 0x4c, 0x46, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x28, 0x0,
                0x1, 0x0, 0x0, 0x0, 0xc8, 0x1, 0x1, 0x0, 0x34, 0x0, 0x0, 0x0, 0x60, 0xb, 0x0, 0x0, 0x0, 0x2, 0x0, 0x5,
                0x34, 0x0, 0x20, 0x0, 0x2, 0x0, 0x28, 0x0, 0xc, 0x0, 0xb, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0xe0, 0x1, 0x0, 0x0, 0xe0, 0x1, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0xe0, 0x1, 0x0, 0x0, 0xe0, 0x1, 0x2, 0x0, 0xe0, 0x1, 0x2, 0x0,
                0x4f, 0x0, 0x0, 0x0, 0x4f, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x4, 0xe0, 0x2d, 0xe5, 0x44, 0x0, 0x9f, 0xe5, 0x1, 0x10, 0xa0, 0xe3, 0x2, 0x20, 0xa0, 0xe3, 0x3, 0x30,
                0xa0, 0xe3, 0x11, 0x0, 0x0, 0xeb, 0x34, 0x70, 0x9f, 0xe5, 0x0, 0x80, 0x97, 0xe5, 0x4, 0x80, 0x2d, 0xe5,
                0x2c, 0x70, 0x9f, 0xe5, 0x0, 0x90, 0x97, 0xe5, 0x4, 0x90, 0x2d, 0xe5, 0x9, 0x0, 0x58, 0xe1, 0x20, 0x70,
                0x9f, 0xe5, 0x0, 0x80, 0x97, 0xe5, 0x4, 0x80, 0x2d, 0xe5, 0x46, 0x0, 0x0, 0xeb, 0xc, 0xd0, 0x8d, 0xe2,
                0x4, 0xf0, 0x9d, 0xe4, 0xe, 0xf0, 0xa0, 0xe1, 0xe0, 0x1, 0x2, 0x0, 0xff, 0x1, 0x2, 0x0, 0x3, 0x2, 0x2,
                0x0, 0x7, 0x2, 0x2, 0x0, 0x93, 0x2, 0x2, 0xe0, 0x1e, 0xff, 0x2f, 0xe1, 0x18, 0xd0, 0x4d, 0xe2, 0x0,
                0x30, 0xa0, 0xe3, 0x1, 0x30, 0x43, 0xe2, 0x1, 0x30, 0x93, 0xe2, 0x88, 0x10, 0x9f, 0xe5, 0x88, 0x20,
                0x9f, 0xe5, 0x88, 0x30, 0x9f, 0xe5, 0x88, 0x40, 0x9f, 0xe5, 0x88, 0x50, 0x9f, 0xe5, 0x0, 0x8a, 0x91,
                0xed, 0x0, 0x9a, 0x91, 0xed, 0x0, 0xaa, 0x91, 0xed, 0x0, 0xba, 0x91, 0xed, 0x0, 0xca, 0x92, 0xed, 0x0,
                0xda, 0x93, 0xed, 0x0, 0xea, 0x94, 0xed, 0x0, 0xfa, 0x95, 0xed, 0x10, 0x3a, 0xf1, 0xee, 0x33, 0x40,
                0xa0, 0xe3, 0x4, 0x48, 0xa0, 0xe1, 0x4, 0x30, 0x83, 0xe1, 0x10, 0x3a, 0xe1, 0xee, 0xc, 0x5a, 0x38, 0xee,
                0xd, 0x6a, 0x39, 0xee, 0xe, 0x7a, 0x3a, 0xee, 0xf, 0x4a, 0x3b, 0xee, 0xc5, 0xa, 0xb7, 0xee, 0xc6, 0x1a,
                0xb7, 0xee, 0xc7, 0x2a, 0xb7, 0xee, 0xc4, 0x3a, 0xb7, 0xee, 0x64, 0x0, 0x9f, 0xe5, 0x10, 0x2b, 0x53,
                0xec, 0x0, 0x1b, 0x8d, 0xed, 0x2, 0x2b, 0x8d, 0xed, 0x4, 0x3b, 0x8d, 0xed, 0x19, 0x0, 0x0, 0xeb, 0x18,
                0xd0, 0x8d, 0xe2, 0x0, 0x0, 0xa0, 0xe3, 0x1, 0x70, 0xa0, 0xe3, 0x0, 0x0, 0x0, 0xef, 0xb, 0x2, 0x2, 0x0,
                0xf, 0x2, 0x2, 0x0, 0x13, 0x2, 0x2, 0x0, 0x15, 0x2, 0x2, 0x0, 0x94, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x40,
                0x53, 0x31, 0x30, 0x20, 0x69, 0x73, 0x20, 0x25, 0x66, 0xa, 0x20, 0x53, 0x31, 0x32, 0x20, 0x69, 0x73,
                0x20, 0x25, 0x66, 0xa, 0x20, 0x53, 0x31, 0x34, 0x20, 0x69, 0x73, 0x20, 0x25, 0x66, 0xa, 0x20, 0x53,
                0x38, 0x20, 0x69, 0x73, 0x20, 0x25, 0x66, 0xa, 0x0, 0x0, 0x98, 0x1, 0x1, 0x0, 0xc4, 0xff, 0xff, 0xeb,
                0xff, 0x74, 0xa0, 0xe3, 0x0, 0x0, 0x0, 0xef, 0x0, 0x0, 0x0, 0x0, 0x4, 0xf0, 0x1f, 0xe5, 0x4, 0x0, 0x0,
                0xff
            };
        var data =
            new byte[]
            {
                0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x3a, 0x20, 0x25, 0x64, 0x2c, 0x20, 0x25,
                0x64, 0x2c, 0x20, 0x25, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x25, 0x64, 0xa, 0x0, 0xfc, 0xff, 0xff,
                0xff, 0x5, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0x3f, 0x9a, 0x2, 0x0, 0x0, 0x4e, 0x0,
                0x7a, 0x0, 0x8b, 0xfc, 0xfa, 0x21, 0x9, 0x40, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61,
                0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x0
            };

        var uni = new Unicorn(Architecture.Arm, EngineMode.Arm | EngineMode.LittleEndian);
        uni.CpuModel = Arm.Cpu.MAX;
        uni.EnableMultipleExits();

        uni.MemMap(0x10000, 0x1000, MemoryPermissions.All);
        uni.MemMap(0x20000, 0x1000, MemoryPermissions.All);
        uni.MemMap(0x30000, 0x1000, MemoryPermissions.All);
        uni.MemMap(0xff000000, 0x1000, MemoryPermissions.All);

        uni.MemWrite(0x10000, program, 480);
        uni.MemWrite(0x20000, data, 79);

        var tramp = new byte[]
            { 0x1e, 0xff, 0x2f, 0xe1, 0x1e, 0xff, 0x2f, 0xe1, 0x1e, 0xff, 0x2f, 0xe1, 0x1e, 0xff, 0x2f, 0xe1 };
        uni.MemWrite(0xff000000, tramp, 12);

        uni.AddNativeHook(
            new CodeHookNativeCallback(((engine, address, size, userData) =>
                Console.WriteLine($"CODE at {address:x}"))),
            UniConst.Hook.Code, 0x10000, 0x20000, 0);

        uni.AddNativeHook(new InterruptHookNativeCallback(((engine, number, userData) =>
            {
                Console.WriteLine("INTERRUPT");
                uni.EmuStop();
            })),
            UniConst.Hook.Intr, 0x10000, 0x20000, 0);
        uni.AddNativeHook(
            new InvalidMemoryAccessNativeCallback((engine, type, address, size, value, userData) =>
            {
                Console.WriteLine("INVALID MEMORY");
                uni.EmuStop();

                return false;
            }),
            1008, 1, 0, 0);

        var p15 = new Arm.CoprocessorRegister()
        {
            CoprocessorId = 15,
            Is64Bit = 0,
            SecurityState = 0,
            Crn = 1,
            Crm = 0,
            Opcode1 = 0,
            Opcode2 = 2
        };

        uni.RegRead(Arm.Register.CP_REG, ref p15);
        p15.Value |= 0xF00000;
        uni.RegWrite(Arm.Register.CP_REG, p15);
        uni.RegWrite(Arm.Register.FPEXC, 0x40000000);
        uni.RegWrite(Arm.Register.CPSR, 16);

        uni.RegWrite(Arm.Register.SP, 0x31000);

        uni.Exits = new ulong[] { 0x100C8, 0x101E0 };

        try
        {
            uni.EmuStart(0x100E0, 0, 0, 0);
        }
        catch (UnicornException e)
        {
            Console.WriteLine($"EMULATION STOPPED: {e.Message}");
        }

        Console.WriteLine("END");
    }
}
